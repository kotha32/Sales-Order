"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyI18nClassification = applyI18nClassification;
const I18N_PROPERTIES_MAP = {
    Chart: {
        namespaces: ['sap.fe.macros'],
        properties: {
            header: 'HED: Header of the chart'
        }
    },
    Form: {
        namespaces: ['sap.fe.macros'],
        properties: {
            title: 'HED: Title of the form'
        }
    },
    FormElement: {
        namespaces: ['sap.fe.macros'],
        properties: {
            label: 'FLD: Label of the form element'
        }
    },
    KPITag: {
        namespaces: ['sap.fe.macros'],
        properties: {
            text: 'TXT: Text of the KPITag',
            tooltip: 'CAP: Tooltip of the KPITag'
        }
    },
    Table: {
        namespaces: ['sap.fe.macros'],
        properties: {
            header: 'TIT: Header of the table'
        }
    },
    ActionGroup: {
        namespaces: ['sap.fe.macros', 'sap.fe.macros.chart', 'sap.fe.macros.table'],
        properties: {
            text: 'BUT: Text of the action group button'
        }
    },
    Action: {
        namespaces: ['sap.fe.macros', 'sap.fe.macros.chart', 'sap.fe.macros.table'],
        properties: {
            text: 'BUT: Text of the action button'
        }
    },
    Column: {
        namespaces: ['sap.fe.macros', 'sap.fe.macros.table'],
        properties: {
            header: 'COL: Header of the column'
        }
    }
};
/**
 * Update macros schema by marking UI5 properties which supports translation.
 * Translatable macros properties are marked with 'i18nClassification' property.
 * @param schema JSON schema for "sap.fe.macros" api.
 */
function applyI18nClassification(schema) {
    const definitions = schema.definitions;
    if (!definitions) {
        return;
    }
    for (const className in I18N_PROPERTIES_MAP) {
        const control = I18N_PROPERTIES_MAP[className];
        for (const namespace of control.namespaces) {
            const controlName = `${namespace}.${className}`;
            const controlSchema = definitions[controlName];
            if (!controlSchema || typeof controlSchema !== 'object') {
                continue;
            }
            for (const property in control.properties) {
                const propertySchema = controlSchema.properties?.[property];
                if (!propertySchema || typeof propertySchema !== 'object') {
                    continue;
                }
                propertySchema['i18nClassification'] = control.properties[property];
            }
        }
    }
}
//# sourceMappingURL=i18n.js.map